
### TOPICOS 2 - RECONHECIMENTO DE PADROES
### SELF-ORGANING MAPS (SOM)             
### PROFESSOR: GEORGE VON BORRIES

### References:

# Examples 1 and 2
# Wehrens R. and Buydens, L.M.C. Self- and Super-organinz 
#   Maps in R: The kohonen Package

# Example 3
# aweSOM
# https://cran.r-project.org/web/packages/aweSOM/vignettes/aweSOM.html

# Example 4
# Jeff. Tutorial: Self Organizing Maps in R
# https://www.polarmicrobes.org/tutorial-self-organizing-maps-in-r/

### PACKAGES

rm(list=ls())
pkgs = installed.packages()

if (!("ggplot2" %in% pkgs)) install.packages("ggplot2"); 
library(ggplot2)
if (!("kohonen" %in% pkgs)) install.packages("kohonen"); 
library(kohonen)  
if (!("aweSOM" %in% pkgs)) install.packages("aweSOM"); 
library(aweSOM)  


#### Example 1 - WINE #### 

library('kohonen')
data("wines")
head(wines)
wines.sc <-scale(wines)
head(wines.sc)
wine.som <- som(wines.sc,
                grid = somgrid(5,4,"hexagonal"))
plot(wine.som, main = "Wine Data")

summary(wine.som)
nunits(wine.som)

#### Example 2 - IRIS - Supervised ####

data("iris")
head(iris)
iris.sc <- scale(iris[,1:4])
head(iris.sc)
iris.xyf <- xyf(iris.sc, as.factor(iris[,5]), 
                grid = somgrid(3,3, "hexagonal"))
par(mfrow = c(1, 2))
plot(iris.xyf)

#### Exemple 3 - IRIS - aweSOM

par(mfrow = c(1, 1))

full.data <- iris
train.data <- full.data[, c("Sepal.Length", 
                            "Sepal.Width", 
                            "Petal.Length", 
                            "Petal.Width")]
train.data <- scale(train.data)
init <- somInit(train.data, 3, 3) # PCA grid
iris.som <- kohonen::som(train.data, 
                         grid = kohonen::somgrid(3, 3, "hexagonal"), 
                         rlen = 100, alpha = c(0.05, 0.01), 
                         radius = c(2.65,-2.65), 
                         dist.fcts = "sumofsquares", init = init)
somQuality(iris.som, train.data)

superclust_pam <- cluster::pam(iris.som$codes[[1]], 3)
superclasses_pam <- superclust_pam$clustering

aweSOMplot(som = iris.som, 
           type = "Cloud", data = full.data, 
           variables = c("Species", "Sepal.Length", 
                         "Sepal.Width",  
                         "Petal.Length", "Petal.Width"), 
           superclass = superclasses_pam)

aweSOMplot(som = iris.som, type = "Hitmap", 
           superclass = superclasses_pam)

aweSOMplot(som = iris.som, type = "UMatrix", 
           superclass = superclasses_pam)

aweSOMsmoothdist(iris.som)
aweSOMplot(som = iris.som, type = "Circular", data = full.data, 
           variables = c("Sepal.Length", "Sepal.Width",  
                         "Petal.Length", "Petal.Width"), 
           superclass = superclasses_pam)
aweSOMplot(som = iris.som, type = "Barplot", data = full.data, 
           variables = c("Sepal.Length", "Sepal.Width",  
                         "Petal.Length", "Petal.Width"), 
           superclass = superclasses_pam, 
           values = "prototypes")
aweSOMplot(som = iris.som, type = "Boxplot", data = full.data, 
           variables = c("Sepal.Length", "Sepal.Width",  
                         "Petal.Length", "Petal.Width"),
           superclass = superclasses_pam, 
           scales = "same")

#### Example 4 - Simulated Data

library('kohonen')

# generate some RGB data #
# select the number of random RGB vectors for training data

sample.size <- 10000

# generate dataframe of random RGB vectors

sample.rgb <- as.data.frame(matrix(nrow = sample.size, ncol = 3))
colnames(sample.rgb) <- c('R', 'G', 'B')

sample.rgb$R <- sample(0:255, sample.size, replace = T)
sample.rgb$G <- sample(0:255, sample.size, replace = T)
sample.rgb$B <- sample(0:255, sample.size, replace = T)

head(sample.rgb)

# train the SOM
# define a grid for the SOM and train 

grid.size <- ceiling(sample.size ^ (1/2.5))
som.grid <- somgrid(xdim = grid.size, 
                    ydim = grid.size, 
                    topo = 'hexagonal', 
                    toroidal = T)
som.model <- som(data.matrix(sample.rgb), 
                 grid = som.grid)

# extract some data to make it easier to use


som.events <- som.model$codes[[1]]
som.events.colors <- rgb(som.events[,1], 
                         som.events[,2], 
                         som.events[,3], 
                         maxColorValue = 255)
som.dist <- as.matrix(dist(som.events))

# generate a plot of the untrained data.  
# this isn't really the configuration at first iteration, but
# serves as an example

plot(som.model,
     type = 'mapping',
     bg = som.events.colors[sample.int(length(som.events.colors), size = length(som.events.colors))],
     keepMargins = F,
     col = NA,
     main = '')

# generate a plot after training.

plot(som.model,
     type = 'mapping',
     bg = som.events.colors,
     keepMargins = F,
     col = NA,
     main = '')

# another grid

som.model2 <- som(data.matrix(sample.rgb), 
                 grid = somgrid(30,30, "hexagonal"))


som.events2 <- som.model2$codes[[1]]
som.events.colors2 <- rgb(som.events2[,1], 
                          som.events2[,2], 
                          som.events2[,3], 
                          maxColorValue = 255)
som.dist2 <- as.matrix(dist(som.events2))

plot(som.model2,
     type = 'mapping',
     bg = som.events.colors2,
     keepMargins = F,
     col = NA,
     main = '')
